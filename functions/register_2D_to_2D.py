#!/usr/bin/python

import sys
from functions.general_functions import get_elastix_paths
import os


def register_2D_to_2D_transformix(x_coordinates, y_coordinates, transformation_file):
    '''
    param x_coordinate: list of x coordinates (in pixels) of the image
    param y_coordinate: list of y coordinates (in pixels) of the image
    param transformation_file: path to the output of elastix

    returns transformed_points: list of x, y coordinates (tuples) (in pixels), for the ARA slice
    '''

    # check that all the inputs are correct
    assert isinstance(x_coordinates, list), 'please pass a list for the x coordinates'
    assert isinstance(y_coordinates, list), 'please pass a list for the y coordinates'
    n_points = len(x_coordinates)
    assert n_points == len(y_coordinates), 'lists of different length'
    # check that elastix has been run
    if os.path.isfile(transformation_file) is False:
        print('run elastix on all images first')
        return None

    # define paths
    _, transformix_path = get_elastix_paths()
    working_dir = os.path.dirname(transformation_file)
    transformation_file_name = os.path.basename(transformation_file)
    # file to generate
    tr_input_file_name = 'inputpoints.txt'
    tr_input_file_path = os.path.join(working_dir, tr_input_file_name)
    # name of file generated by transformix
    tr_output_file_name = 'outputpoints.txt'

    # create the file of points that transformix needs
    tif = open(tr_input_file_path, 'w')
    tif.write('point\n')
    tif.write('{}\n'.format(n_points))
    for i in range(n_points):
        tif.write('{} {}\n'.format(x_coordinates[i], y_coordinates[i]))
    tif.close()

    # run transformix
    # Change directory and run local, otherwise elastix is shit
    os.chdir(working_dir)
    transform_command = '{0} -def {1} -out {2} -tp {3}'.format(transformix_path,
                                                               tr_input_file_name,
                                                               '.',
                                                               transformation_file_name)

    os.system(transform_command)

    # parse the output
    assert os.path.isfile(tr_output_file_name), 'attempted to run transformix on nothing...'
    tof = open(tr_output_file_name, 'r')
    transformed_points = []
    lines = tof.readlines()
    for line in lines:
        part1 = line.split(';')[3]
        part2 = part1.split(' ')
        tr_x = int(part2[4])
        tr_y = int(part2[5])
        transformed_points.append(tuple([tr_x, tr_y]))
    tof.close()

    return transformed_points


if __name__ == '__main__':
    # check input
    if len(sys.argv) != 4:
        sys.exit('Arguments missing, please run like this:\
            python register_2D_to_2D_transformix x_coordinates y_coordinates TransformParameters.1.txt')
    # catch input
    x = sys.argv[1]
    x = list(x.split(','))
    y = sys.argv[2]
    y = list(y.split(','))
    textfile = sys.argv[3]
    # run function
    reg_points = register_2D_to_2D_transformix(x, y, textfile)
    print(reg_points)
